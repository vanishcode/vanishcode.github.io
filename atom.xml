<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://vanishcode.github.io</id>
    <title>vanishcode&apos;s home</title>
    <updated>2019-12-15T02:45:09.716Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://vanishcode.github.io"/>
    <link rel="self" href="https://vanishcode.github.io/atom.xml"/>
    <subtitle>上班不摸鱼</subtitle>
    <logo>https://vanishcode.github.io/images/avatar.png</logo>
    <icon>https://vanishcode.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, vanishcode&apos;s home</rights>
    <entry>
        <title type="html"><![CDATA[搞技术的人容易犯的错误]]></title>
        <id>https://vanishcode.github.io/post/gao-ji-zhu-de-ren-rong-yi-fan-de-cuo-wu</id>
        <link href="https://vanishcode.github.io/post/gao-ji-zhu-de-ren-rong-yi-fan-de-cuo-wu">
        </link>
        <updated>2019-12-15T02:43:31.000Z</updated>
        <content type="html"><![CDATA[<p>刚刚被面试官吊打了一下。虽然面试不是说多么高大上的题目，但是基本都是很可以考察一个人基本功的题目。然后我想，我又犯这个错误了——好高骛远，眼高手低。</p>
<p>貌似很多新人都会有这个问题。拿我来说，有些问题知道该怎么写，但不知为什么不这么写，举个随便想的栗子：</p>
<pre><code class="language-js">function a(){
    return b(){
        // 为什么没有这样用的？
    }
}
</code></pre>
<p>很多东西你只见过，看过，但没有思考过，所以，面试时候，每个题其实都见过，但让你写出来，就傻眼了。</p>
<p>还有一个问题就是老是去追求高大上，比如Vue源码之类的，比如我就是。没完全搞明白怎么使用，怎么更有效率的使用，就去读源码，所以只是读完了没有任何收获。真正的基础以为都会了，结果考一个真正基础的反而傻眼了。</p>
<p>悲哀啊，以后注意了，想把啥做好，差不多都一样，就是——从浅入深，认真思考。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最近做了一个组件，写写收获]]></title>
        <id>https://vanishcode.github.io/post/zui-jin-zuo-liao-yi-ge-zu-jian-xie-xie-shou-huo</id>
        <link href="https://vanishcode.github.io/post/zui-jin-zuo-liao-yi-ge-zu-jian-xie-xie-shou-huo">
        </link>
        <updated>2019-11-29T15:11:52.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1单向数据流">1.单向数据流</h2>
<p>子组件只管渲染，父组件只管数据更改；<br>
子组件state尽量只和自己状态有关（与渲染用的数据低耦合），比如下拉是否展开，这种最好是用state。</p>
<h2 id="2项目结构">2.项目结构</h2>
<p>最好有一套属于自己的模板，每次做组件的时候可以快速投入开发，而不是搞一堆配置文件；<br>
做之前想好组件、工具集怎么拆分。</p>
<h2 id="3其他">3.其他</h2>
<p>必须熟练使用，源码必读：react &amp; antd，vue &amp; element；<br>
以及项目配套的构建工具：Webpack，umi，storybook等等配置手到擒来。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[js不准确的定时器的修正]]></title>
        <id>https://vanishcode.github.io/post/js-bu-zhun-que-de-ding-shi-qi-de-xiu-zheng</id>
        <link href="https://vanishcode.github.io/post/js-bu-zhun-que-de-ding-shi-qi-de-xiu-zheng">
        </link>
        <updated>2019-11-03T09:55:48.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-js">// 修正settimeout
var startTime = new Date().getTime();
var count = 0;

// 模拟延时任务
setInterval(function () {
    var i = 0;
    while (i++ &lt; 10000);
}, 0);

/* 
* 原理：不考虑误差，每次递归，count加一，所以期望当前时间对应是count*1000，相减就是误差，
* 就是相对于正确时间“慢了的”，所以在下次调用自身时应该把这个减去，做到“提前”
*/

function fixed() {
    count++;
    var offset = new Date().getTime() - (startTime + count * 1000);
    var nextTime = 1000 - offset;
    if (nextTime &lt; 0) nextTime = 0;
    setTimeout(fixed, nextTime);
    console.log(new Date().getTime() - (startTime + count * 1000));
}
setTimeout(fixed, 1000);
</code></pre>
<p>其实抛开第一个延时模拟，误差不是特别大，但是实际情况中基本上肯定比这个要多，这个只是做到了不累加，所以误差基本上会根据用户情况稳定在某一范围，这样其实基本满足生产要求了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在Nuxt里面使用G2库]]></title>
        <id>https://vanishcode.github.io/post/zai-nuxt-li-mian-shi-yong-g2-ku</id>
        <link href="https://vanishcode.github.io/post/zai-nuxt-li-mian-shi-yong-g2-ku">
        </link>
        <updated>2019-11-02T15:53:23.000Z</updated>
        <content type="html"><![CDATA[<p>通过plugin的方式会初始化失败，提示没有document，因为走了打包流程，nodejs环境里面没有BOM DOM对象，于是采用下面的方法：</p>
<p>1.在nuxt.config.js里面通过script标签形式直接引入</p>
<p>2.这样的话引入的库不走nuxt打包流程，于是就不存在没有document或者window对象的问题</p>
<p>3.这样其实和在html里面直接使用g2等库没有区别了，在vue里面一样写的，因为G2已经通过script方式引入到了document里面，console.log一下window.G2，是有这个对象的</p>
<p>4.一般在mount里面初始化</p>
<p>今天（16）仔细看了一下nuxt文档，应该是</p>
<pre><code class="language-js">module.exports = {
  plugins: [
    { src: '~/plugins/vue-notifications', ssr: false }
  ]
}
</code></pre>
<p>把ssr写成false就可以了，这样不走服务端。</p>
<p>问题：echarts可以ssr：true，但是g2不可以，为什么呢。。。。。。。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[antd pro 的数据流动]]></title>
        <id>https://vanishcode.github.io/post/antd-pro-de-shu-ju-liu-dong</id>
        <link href="https://vanishcode.github.io/post/antd-pro-de-shu-ju-liu-dong">
        </link>
        <updated>2019-10-18T02:51:09.000Z</updated>
        <content type="html"><![CDATA[<p>主要是这个东西封装的都是阿里自己的东西，什么umi、dva之类的，阿里很喜欢自己造轮子。。。<br>
最近为了做项目，小小研究了一下，写篇blog作为笔记。</p>
<figure data-type="image" tabindex="1"><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1a8fmwckjj30ek09d74f.jpg" alt=""></figure>
<hr>
<h3 id="举例">举例：</h3>
<p>我以 <code>Dashboard</code> 的 <code>Analysis</code> 页面为例子：</p>
<p>1.首先先看这个<code>@connect</code> 和 <code>dispatch</code>：</p>
<figure data-type="image" tabindex="2"><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1a81wn82cj30cb08sdfx.jpg" alt=""></figure>
<p><code>connect</code> 是<a href="https://dvajs.com/guide/getting-started.html#connect-%E8%B5%B7%E6%9D%A5">dva</a>里的，其实应该就是 <code>react-redux</code> 的 <code>connect</code>。</p>
<p><code>dispatch</code> 里，<code>type</code> 的 <code>chart</code> 是命名空间，对应的是当前目录下 <code>model</code> 文件夹里那个文件：</p>
<figure data-type="image" tabindex="3"><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1a885h41wj306w028gle.jpg" alt=""></figure>
<p>而 <code>loading.effects['chart/fetch']</code> 则是把取数据和loading联合起来，取数据的时候实现加载动画。</p>
<p>2.再看看上面用到的chart里的fetch：</p>
<figure data-type="image" tabindex="4"><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1a8aggm1gj30bo06fq2y.jpg" alt=""></figure>
<p>这里主要是 <code>call</code> 和 <code>put</code> 函数。<code>call</code> 函数，顾名思义，调用函数，调用啥呢？这里调用了 <code>fakeChartData</code> 这个函数，然后看第一行，<code>import { fakeChartData } from '@/services/api'</code> 是从 <code>services</code> 目录引入的：</p>
<figure data-type="image" tabindex="5"><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1a8gddhlnj309q02ra9w.jpg" alt=""></figure>
<p>而 <code>put</code> 函数就是更新状态了。<code>type</code> 的 <code>save</code> 就是 <code>reducer</code>，而 <code>payload</code> 就是所谓的 <code>载荷</code>了：</p>
<figure data-type="image" tabindex="6"><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1ablce2foj308i07sglj.jpg" alt=""></figure>
<p>而取数据，就是组件里的状态其实是通过 <code>this.props</code> 传过来的：</p>
<figure data-type="image" tabindex="7"><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1beyuwyutj309t065wee.jpg" alt=""></figure>
<p>3.mock。pro里封装了 <code>mockjs</code> 来使用假数据调试：</p>
<figure data-type="image" tabindex="8"><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1a8knnh38j307j0am3ye.jpg" alt=""></figure>
<p>直接看最后一行：</p>
<figure data-type="image" tabindex="9"><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1a8k6amksj30bd08d749.jpg" alt=""></figure>
<p>这个路径就是刚才在api的 <code>fakeChartData</code> 的 <code>request</code> 函数的参数了，就是实际的接口了。</p>
<h3 id="结语">结语</h3>
<p>用这个东西还要学阿里自己的小众轮子，其实是有些难受的。不过Pro封装的确实很好，学完dva、umi之后开发起来还是比较快的。仔细看看我其实这篇也没说什么，唯一的作用就是你不需要看文档了（antd pro、umi、dva），直接开干<img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1a8r9as2sj302f014dfl.jpg" alt=""></p>
<p>参考：</p>
<p>1.https://dvajs.com/</p>
<p>2.https://pro.ant.design/docs/</p>
<p>3.https://umijs.org/zh/guide/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[拿到某个元素上监听的所有事件]]></title>
        <id>https://vanishcode.github.io/post/na-dao-mou-ge-yuan-su-shang-jian-ting-de-suo-you-shi-jian</id>
        <link href="https://vanishcode.github.io/post/na-dao-mou-ge-yuan-su-shang-jian-ting-de-suo-you-shi-jian">
        </link>
        <updated>2019-10-16T01:01:49.000Z</updated>
        <content type="html"><![CDATA[<p>同学做毕设时候遇到的问题——</p>
<pre><code class="language-js">function traversal(node) {
    if (node &amp;&amp; node.nodeType === 1) {
        //  fuck, `getEventListeners()` only for Chrome  in CLI !
        var eventsList = $._data(node, &quot;events&quot;)           
        if (JSON.stringify(eventsList) !== undefined) {
            console.log(eventsList);
        }
    }
    var i = 0,
        childNodes = node.childNodes,
        item;
    for (; i &lt; childNodes.length; i++) {
        item = childNodes[i];
        if (item.nodeType === 1) {
            traversal(item);
        }
    }
}

var doc = document.documentElement

traversal(doc)

(function() {
    var result = []
    function traversal(node) {
        if (node &amp;&amp; node.nodeType === 1) {
            var eventsList = $._data(node, &quot;events&quot;)
            if (eventsList !== undefined) {
                result.push(eventsList);
            }
        }
        var i = 0,
            childNodes = node.childNodes,
            item;
        for (; i &lt; childNodes.length; i++) {
            item = childNodes[i];
            if (item.nodeType === 1) {
                traversal(item);
            }
        }
    }

    var doc = document.getElementsByTagName('body')[0]

    traversal(doc)

    return result

})()
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[sf回答问题有感]]></title>
        <id>https://vanishcode.github.io/post/sf-hui-da-wen-ti-you-gan</id>
        <link href="https://vanishcode.github.io/post/sf-hui-da-wen-ti-you-gan">
        </link>
        <updated>2019-09-20T13:56:28.000Z</updated>
        <content type="html"><![CDATA[<p>草泥马的最烦问问题说不清自己要干嘛的。比如：“我antd点不了”这类不像是人说的话的。</p>
<p>真的是只想送你一句“大傻逼”。</p>
<p>难道不应该这么问吗：“我antd的form表单中使用decorator后所有按钮不能点击”。</p>
<p>你，干了什么，做了哪些操作，用的框架版本，浏览器，系统版本，框架依赖版本，啥都不说，就一句“咋不好使啊”就像让别人给你解决问题，你是一个弱智吗？<br>
话都不会说，我他妈想帮你都难。</p>
<p>最舒服的是能清晰的描述自己的需求的，并且能给出最小复现实例的比如在codepen上写个demo，这种人真的可爱。</p>
<p>周末不答题了，周一再说。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[不要随便改动macOS或MacOSX自带的python]]></title>
        <id>https://vanishcode.github.io/post/bu-yao-sui-bian-gai-dong-macos-huo-macosx-zi-dai-de-python</id>
        <link href="https://vanishcode.github.io/post/bu-yao-sui-bian-gai-dong-macos-huo-macosx-zi-dai-de-python">
        </link>
        <updated>2019-09-05T07:53:54.000Z</updated>
        <content type="html"><![CDATA[<p>mac自带python2.6和python2.7，这两个都在 <code>Python.framework</code> 中，而且里面由2.2和2.3的快捷方式，其实是指向=&gt;2.6。</p>
<p>而且vscode的<code>code .</code>命令行开启vscode其实用的是python...<br>
这个东东在<code>/Applications/Visual Studio Code.app/Contents/Resources/app/bin</code>，你会看到里面有python调用....</p>
<p>因此如果乱动乱删自带的python，其中一个问题就是不能命令行飞快地打开code了<sub>_</sub></p>
<p>当然也非常可能发生更严重的问题！比如某些系统软件从此不能打开之类的，或者自动更新中出现问题。因为mac或linux很多应用都依赖于自带的环境（不止python2哦）。</p>
<p>参考：<br>
1.https://stackoverflow.com/questions/10212270/python-asks-for-older-paths-on-mac-after-deleting-duplicate-python-installation<br>
2.https://github.com/Microsoft/vscode/issues/3790</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[工作两月，总结一哈]]></title>
        <id>https://vanishcode.github.io/post/gong-zuo-liang-yue-zong-jie-yi-ha</id>
        <link href="https://vanishcode.github.io/post/gong-zuo-liang-yue-zong-jie-yi-ha">
        </link>
        <updated>2019-09-02T07:11:05.000Z</updated>
        <content type="html"><![CDATA[<p>到今天（9月2号），差不多工作满两个月了，相对于上个月的总结，这一个月收获还是蛮多的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[工作一个月，总结一下]]></title>
        <id>https://vanishcode.github.io/post/gong-zuo-yi-ge-yue-zong-jie-yi-xia</id>
        <link href="https://vanishcode.github.io/post/gong-zuo-yi-ge-yue-zong-jie-yi-xia">
        </link>
        <updated>2019-08-05T07:04:12.000Z</updated>
        <content type="html"><![CDATA[<p>正式参加工作一个多月了，该总结一下了。主要分为两个部分，工作上和生活上。</p>
<h3 id="工作">工作</h3>
<p>1.写代码之前一定要想好再开始写 XD，有多少接口，会出现什么错误，变量放在哪里······；</p>
<p>2.设计模式是个很重要的东西。组件怎么设计，函数怎么封装，怎样可读性更好······代码是给人看的，所以一定要写得“漂亮”，追求 <code>bug free</code> &amp; <code>code clean</code>；</p>
<p>3.不懂的不要太死扣，及时询问有经验的老员工，节省时间的同时听取经验；</p>
<p>4.技术上，具体点说：</p>
<ul>
<li>lodash 是个好东西；</li>
<li>js基础需要经常复习，主要是类型转换之类的；</li>
<li>拒绝重复操作，能封装的要封装；</li>
<li>注意多读导师的代码；</li>
<li>判断 true 还是 false 在保证一定正确的前提下尽可能短。</li>
</ul>
<h3 id="生活">生活</h3>
<p>1.下班回家娱乐时间不要太长，能学就学；</p>
<p>2.周末找机会出去，不要宅两天，最起码一天要出去；</p>
<p>3.晚上回去别吃零食了。</p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/vanishcode/upics/raw/master/1.jpg" alt="pic"></figure>
]]></content>
    </entry>
</feed>